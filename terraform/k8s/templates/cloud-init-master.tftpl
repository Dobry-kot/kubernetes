#cloud-config
users:
  - name: dkot
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    shell: /bin/bash
    lock_passwd: true
    ssh_authorized_keys:
      - ${ ssh_key }

runcmd:
  - systemctl daemon-reload
  - systemctl enable key-keeper.service
  - systemctl start key-keeper.service

write_files:

  - path: /etc/systemd/system/key-keeper.service
    owner: root:root
    permissions: '0644'
    content: |
      [Unit]
      Description=key-keeper-agent

      Wants=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/usr/bin/key-keeper -config-dir ${base_local_path_certs} -config-regexp .*vault-config 

      Restart=always
      StartLimitInterval=0
      RestartSec=10

      [Install]
      WantedBy=multi-user.target


  - path: /root/.bashrc
    owner: root:root
    permissions: '0644'
    content: |
      # .bashrc

      # User specific aliases and functions

      PROMPT_COMMAND='history -a'
      export HISTCONTROL="ignoreboth"
      export HISTIGNORE=""
      shopt -s cmdhist

      alias rm='rm -i'
      alias cp='cp -i'
      alias mv='mv -i'

      alias kg='kubectl get'
      alias ka='kubectl apply'
      alias kd='kubectl delete'
      alias ki='kubectl describe'
      alias ke='kubectl edit'
      alias k='kubectl '
      alias kl='kubectl logs '

      alias crictl='crictl  --runtime-endpoint unix:///run/containerd/containerd.sock '

      new_kubeconfig () {
        SRC_SSH_PORT=$(env | grep SSH_CONNECTION | awk '{print $2}')
        cp -uf ${base_path.kubernetes_path}/kube-apiserver/kubeconfig /tmp/$\{USER\}.$\{SRC_SSH_PORT\}.kubeconfig
        export KUBECONFIG=/tmp/$\{USER\}.$\{SRC_SSH_PORT\}.kubeconfig
      }
      new_kubeconfig

      kns () {
        kubectl config set-context --current --namespace=$1
      }

      estat () {
          ENDPOINTS=$(cat ${base_path.static_pod_path}/kube-apiserver.yaml | grep etcd-servers=https | awk -F "=" '{print $2}')
          etcdctl \
          --write-out=table \
          --endpoints=$ENDPOINTS \
          --cert ${ssl.intermediate["etcd-ca"].issuers["etcd-client"].certificates["kube-apiserver-etcd-client"].key-keeper-args.spec.host_path}/kube-apiserver-etcd-client.pem \
          --key ${ssl.intermediate["etcd-ca"].issuers["etcd-client"].certificates["kube-apiserver-etcd-client"].key-keeper-args.spec.host_path}/kube-apiserver-etcd-client-key.pem \
          --cacert ${ssl.intermediate["etcd-ca"].host_path}/etcd-ca.pem \
          endpoint status
      }

      # Source global definitions
      if [ -f /etc/bashrc ]; then
              . /etc/bashrc
      fi

  - path: ${base_local_path_certs}/certs/kube-apiserver/kube-apiserver-sa.pub
    owner: root:root
    permissions: '0644'
    encoding: b64
    content: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6Ly90anJ4aHcrTHM4WWxiazBNSAozcW96OHRuRlhMcFYxR2t4bzdnZ1hqZXY5SHV0M0ZPN3FaQzV3cDhZemwvYjZaeFRmNGVKZ0l3ZytWbXpIcHhkCjlaSGxBWlZDOE92alRjU2NRNUpRZlh0WTRVZ25SbTUrQWExNTFTTHRGc3ltM21adHpMbXU4eUxkZ2toOWV3WjIKbTEwYkRQb0VkUnZjazE5cWM2K0pKTzhVNmxma2c4ZWNray9sL3JhZjIzellEV2NwSGJIT2JrbnVBM3FZR29kWApkaitBY0gwNGI3ZG42VVhpb0Iyd3liakRIZDBINDNkZ05RaHcxaDhOU0RNS08wQlAvWm9mTW9ObjN1eGg1ankvCktaTFUvTTd5NHExYlptTVZ6c0tMaW9sMlhmSktJZmJERmtxcUR4Qng5VUp5bnNUQmcvVHozMWZUNW40dGlhT0gKaXdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==

  - path: ${base_local_path_certs}/certs/kube-apiserver/kube-apiserver-sa.pem
    owner: root:root
    permissions: '0644'
    encoding: b64
    content: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBei8vdGpyeGh3K0xzOFlsYmswTUgzcW96OHRuRlhMcFYxR2t4bzdnZ1hqZXY5SHV0CjNGTzdxWkM1d3A4WXpsL2I2WnhUZjRlSmdJd2crVm16SHB4ZDlaSGxBWlZDOE92alRjU2NRNUpRZlh0WTRVZ24KUm01K0FhMTUxU0x0RnN5bTNtWnR6TG11OHlMZGdraDlld1oybTEwYkRQb0VkUnZjazE5cWM2K0pKTzhVNmxmawpnOGVja2svbC9yYWYyM3pZRFdjcEhiSE9ia251QTNxWUdvZFhkaitBY0gwNGI3ZG42VVhpb0Iyd3liakRIZDBICjQzZGdOUWh3MWg4TlNETUtPMEJQL1pvZk1vTm4zdXhoNWp5L0taTFUvTTd5NHExYlptTVZ6c0tMaW9sMlhmSksKSWZiREZrcXFEeEJ4OVVKeW5zVEJnL1R6MzFmVDVuNHRpYU9IaXdJREFRQUJBb0lCQVFDTlE4WTFzTis5U0h1ZwpONmZJUmpnc0UvQ2dPU0wvclZYcG8yQWhUMFk4ZHhtN3M5d0t6WnVndURoUlkvaFhBV2U4SzMzU0dWMWJ2dEFPClNjdUxPS3Zmd3F5RC9MbXdJcVVJQmtZUzVtWmdNc3ZVaFVxWFhTZWJRQlNFbXVubkdDc2sxUEF4b05LZk1zaTYKV1QxUHRyNExHcHJxbjBzenRpNkNzTVQ5dVBRdDdqRVR2cWM4MnYyY0JIZEQyY0NvcDl5WlNLdlBtcW5kbXdUeQpCV3BLN1ZkNlNDQ2lOOXlOT1ZBZVJPcmN2TWdIWCtkSlBRM2Fad1BrUHRLZHFZUVNMMDZZc1VER0IxQ1RCTnAwCkE5czBRUnNzMVp1cmR1TEh2RHQwclB4RTJlL2huVFpxYXhjWTF3bUg3NFdFSVgwUStnUDMvcXVib29EeUtpSXMKWWRIYndDRGhBb0dCQU9qSTRkbklNcThENnVuNTNMTGZzQzArczVvZmtTOFZVV0NucjIxNTJGbWs0Y0h0Y2pMcgo4RXJGM0FzQTlmdys4YlZQbFFRUW1CTXdqczFsZVZ4UklkdENqOVRSdGFjdGh3VDRFOUwybllwMlVHNzU5dTltCkQrQjRST09jNGlqQnRGUHBOVzlIOEZGWHhkR3NTdUNpanZEWTZ5KzhGK2JxZXNndk5Oc0pnQW1KQW9HQkFPUysKUmFHcXQ0eW1IUUNxRXpKR2lCMEpsdkc0dlFoQTc1eDB3TXpzQjlESkh1dTlaU1MwYWRQNFRqMXY0VExoQnhabgpTdTR3akVnaUNLbUZ1RlBsVWs4bE91Q1FOYnY2Tzl6MGx4eE93djY5Wm9uQm9VSDluYWhLK3JvTzN5QzVwR3RJCnFUTHhPZHhaUmxGall4czMveGFCeTFTN2ZFNklETkRmL3VWeFdJZHpBb0dCQUt0Y1ZZWHdMZjlRTHZvV2lUVFUKSGVqd28xM3RwdjYxL3JYY092T29JbSs3Uk1WeGVnT3FVN1YzZWNoUDZNVEx3VHJyWHBNamRBK01TMU5BUTlxRgpqeHJOSVB4VmRCZWhHQ2U4Unp1aGQ4K1owUlFneG5yczh2c1hEZjlRV2R3TzNDUjVKSERLMEVuUkJ6cVdUbmlXCnNncnlaQTg3czR5MVI3VmRxdGNqWXpHaEFvR0FOYWpsRU0zSmpUY1NxcXM3SVpvbUtCbXR6VHEzTFk1K0owZkUKU3M0Nzd5Q2ZIbElwdmZpTXN1c1cvNWFWVDZnMlQyMGZ5TXlldS9Vdjd3U3RmeERXeERaSm41QjA2b29ETFF3Nwp2cXBEV0JyNlNPcWhkNmVWS251Y1liVkhacGZtR0R6TlpHUHVYT0NjZkU5Q1dvcENUdmRYeWFMSndHcHVCem5rCnc5SlpJRDBDZ1lBNSttWDBKRVRkcmc3bTRrSXR4VXJvUTdyTStFYUpnUzRqZFV3cW5NRFdQYUhwYXR4bjFNeUgKUE5DcGFyK0dRUFU0WUNIZENxdFNDMERBVW1QeU5id2MrQmhxeTVKNHpSYnNST0pWU29QZ01iL0xkd09kc1F1NgprbGFuQVVvMHpqV2lZRDNsOTR2dmVqUGxZS1lRQmpZeTBScGhpQjV3VHBVK2d1b1lkS0JRVlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=

####### Настройка kubelet
  - path: ${base_path.kubernetes_path}/kubelet/service/kubelet-args.env
    owner: root:root
    permissions: '0644'
    content: |
      KUBELET_HOSTNAME="
          --hostname-override=${ instance_name }
          --node-labels=node.kubernetes.io/${instance_type}
      "
      KUBELET_BASIC_ARGS="
          --register-node=true
          --image-pull-progress-deadline=2m
          --v=2
      "
      KUBELET_AUTH_ARGS="
          --anonymous-auth="false"
      "
      KUBELET_CNI_ARGS="
          --cni-bin-dir=/opt/cni/bin
          --cni-conf-dir=/etc/cni/net.d
          --network-plugin=cni
      "
      KUBELET_CONFIGS_ARGS="
          --config=${base_path.kubernetes_path}/kubelet/config.yaml
          --root-dir=/var/lib/kubelet
          --register-node=true
          --image-pull-progress-deadline=2m
          --v=2
      "
      KUBELET_KUBECONFIG_ARGS="
          --kubeconfig=${base_path.kubernetes_path}/kubelet/kubeconfig
          --bootstrap-kubeconfig=${base_path.kubernetes_path}/kubelet/bootstrap-kubeconfig
      "
      KUBELET_RUNTIME_ARGS="
          --container-runtime=remote
          --container-runtime-endpoint=/run/containerd/containerd.sock
          --pod-infra-container-image=k8s.gcr.io/pause:3.6
      "

  - path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    owner: root:root
    permissions: '0644'
    content: |
      [Service]
      EnvironmentFile=-${base_path.kubernetes_path}/kubelet/service/kubelet-args.env
      
      ExecStart=
      ExecStart=/usr/bin/kubelet \
        $KUBELET_HOSTNAME \
        $KUBELET_CNI_ARGS \
        $KUBELET_RUNTIME_ARGS \
        $KUBELET_AUTH_ARGS \
        $KUBELET_CONFIGS_ARGS \
        $KUBELET_BASIC_ARGS \
        $KUBELET_KUBECONFIG_ARGS

  - path: ${base_path.kubernetes_path}/kubelet/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      apiVersion: kubelet.config.k8s.io/v1beta1
      authentication:
        anonymous:
          enabled: false
        webhook:
          cacheTTL: 0s
          enabled: true
        x509:
          clientCAFile: "${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem"
      tlsCertFile: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-server"].certificates["kubelet-server"].key-keeper-args.spec.host_path}/kubelet-server.pem
      tlsPrivateKeyFile: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-server"].certificates["kubelet-server"].key-keeper-args.spec.host_path}/kubelet-server-key.pem
      authorization:
        mode: Webhook
        webhook:
          cacheAuthorizedTTL: 0s
          cacheUnauthorizedTTL: 0s
      cgroupDriver: systemd
      clusterDNS:
        - "${kubelet-config.dns_address}"
      clusterDomain: cluster.local
      cpuManagerReconcilePeriod: 0s
      evictionPressureTransitionPeriod: 0s
      fileCheckFrequency: 0s
      healthzBindAddress: 127.0.0.1
      healthzPort: 10248
      httpCheckFrequency: 0s
      imageMinimumGCAge: 0s
      kind: KubeletConfiguration
      logging:
        flushFrequency: 0
        options:
          json:
            infoBufferSize: "0"
        verbosity: 0
      memorySwap: {}
      nodeStatusReportFrequency: 0s
      nodeStatusUpdateFrequency: 0s
      resolvConf: /etc/resolv.conf
      rotateCertificates: true
      runtimeRequestTimeout: 0s
      serverTLSBootstrap: true
      shutdownGracePeriod: 0s
      shutdownGracePeriodCriticalPods: 0s
      staticPodPath: "${base_path.static_pod_path}"
      streamingConnectionIdleTimeout: 0s
      syncFrequency: 0s
      volumeStatsAggPeriod: 0s

####### Конфиг key-keeper для выпуска сертификатов через Vault
  - path: ${base_local_path_certs}/vault-config
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, key_keeper_config)}


####### Статик поды для создания контрол плейна
  - path: ${base_path.static_pod_path}/etcd.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, etcd-manifest)}

  - path: ${base_path.static_pod_path}/kube-apiserver.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-apiserver-manifest)}

  - path: ${base_path.static_pod_path}/kube-controller-manager.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-controller-manager-manifest)}

  - path: ${base_path.static_pod_path}/kube-scheduler.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-scheduler-manifest)}


####### KUBECONFIGS для подключения к кластеру
  - path: ${base_path.kubernetes_path}/kube-scheduler/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
          server: https://127.0.0.1:6443
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          namespace: default
          user: kube-scheduler
        name: kube-scheduler@kubernetes
      current-context: kube-scheduler@kubernetes
      kind: Config
      preferences: {}
      users:
      - name: kube-scheduler
        user:
          client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-scheduler-client"].certificates["kube-scheduler-client"].key-keeper-args.spec.host_path}/kube-scheduler-client.pem
          client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-scheduler-client"].certificates["kube-scheduler-client"].key-keeper-args.spec.host_path}/kube-scheduler-client-key.pem

  - path: ${base_path.kubernetes_path}/kube-controller-manager/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
          server: https://127.0.0.1:6443
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          namespace: default
          user: kube-controller-manager
        name: kube-controller-manager@kubernetes
      current-context: kube-controller-manager@kubernetes
      kind: Config
      preferences: {}
      users:
      - name: kube-controller-manager
        user:
          client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-controller-manager-client"].certificates["kube-controller-manager-client"].key-keeper-args.spec.host_path}/kube-controller-manager-client.pem
          client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-controller-manager-client"].certificates["kube-controller-manager-client"].key-keeper-args.spec.host_path}/kube-controller-manager-client-key.pem

  - path: ${base_path.kubernetes_path}/kube-apiserver/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
          server: https://127.0.0.1:6443
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          namespace: default
          user: kube-apiserver
        name: kube-apiserver@kubernetes
      current-context: kube-apiserver@kubernetes
      kind: Config
      preferences: {}
      users:
      - name: kube-apiserver
        user:
          client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-apiserver-kubelet-client"].certificates["kube-apiserver-kubelet-client"].key-keeper-args.spec.host_path}/kube-apiserver-kubelet-client.pem
          client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-apiserver-kubelet-client"].certificates["kube-apiserver-kubelet-client"].key-keeper-args.spec.host_path}/kube-apiserver-kubelet-client-key.pem

  - path: ${base_path.kubernetes_path}/kubelet/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
          server: https://127.0.0.1:6443
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          namespace: default
          user: kubelet
        name: kubelet@kubernetes
      current-context: kubelet@kubernetes
      kind: Config
      preferences: {}
      users:
      - name: kubelet
        user:
          client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-client"].certificates["kubelet-client"].key-keeper-args.spec.host_path}/kubelet-client.pem
          client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-client"].certificates["kubelet-client"].key-keeper-args.spec.host_path}/kubelet-client-key.pem

####### Второстепенная настройка
  - path: ${base_path.kubernetes_path}/kube-apiserver/audit-policy.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
      - level: Metadata
      - level: RequestResponse
