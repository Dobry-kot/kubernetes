---
- name: SETUP KUBE-APISERVER.
  vars:
    k8s_component: kube-apiserver
  block:
    - name: DOWNLOAD BASIC BINARY K8S-COMPONENTS.
      get_url:
        url: "{{ k8s_component_bin.url }}"
        dest: "{{ k8s_component_bin.path }}"
        mode: 0775
      loop:
        - url: https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/{{ k8s_component }}
          path: /usr/bin/
      loop_control:
          loop_var: k8s_component_bin

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ k8s_component_path }}"
        state: directory
        mode: '0775'
      loop:
        - /etc/kubernetes/{{ k8s_component }}
        - /pki/certs/{{ k8s_component }}
      loop_control:
          loop_var: k8s_component_path

    - name: NEW <{{ component }}> CA.
      vars:
        component_local: front-proxy
      block:
        - name: CREATE <{{ component }}> CA.
          vars:
            csr:
              CN: "{{ component }}-ca"
              names:
                - O: "{{ component }}-ca"
          import_role:
            name: k8s
            tasks_from: k8s-certificates-ca-create.yaml
          delegate_to: "{{ groups.masters[0] }}"

        - name: DELIVERY CA.
          import_role:
            name: k8s
            tasks_from: k8s-certificates-ca-delivery.yaml
      tags:
        - ssl_api

    - name: CREATE CERT <front-proxy> CLIENT.
      vars:
        csr:
          CN: "system:{{ k8s_component }}-front-proxy-client"
          names:
            - O: "system:masters"
        profile: client
        ca: front-proxy
      import_role:
        name: k8s
        tasks_from: k8s-certificate-template.yaml

    - name: CREATE CERT <etcd> CLIENT.
      vars:
        csr:
          CN: "system:{{ k8s_component }}-etcd-client"
          names:
            - O: "system:masters"
        profile: client
        ca: etcd
      import_role:
        name: k8s
        tasks_from: k8s-certificate-template.yaml

    - name: CREATE CERT <{{ k8s_component }}> SERVER.
      vars:
        hosts_list: 
          - "127.0.0.1"
          - "127.0.1.1"
          - "127.0.1.6"
          - "localhost"
          - "kubernetes.default.svc.cluster.local"
          - "{{ ansible_default_ipv4.address }}"
          - "{{ cluster_api_ip }}"
          - "{{ external_api_ip }}"
          - "{{ inventory_hostname }}"
        csr:
          CN: "system:{{ k8s_component }}-server"
          names:
            - O: "system:{{ k8s_component }}"
          hosts: "{{ hosts_list + groups.masters }}"
        profile: server
        ca: root
      import_role:
        name: k8s
        tasks_from: k8s-certificate-template.yaml

    - name: CREATE CERT <kubelet> CLIENT.
      vars:
        csr:
          CN: "system:{{ k8s_component }}-kubelet-client"
          names:
            - O: "system:masters"
        profile: client
        ca: root
      import_role:
        name: k8s
        tasks_from: k8s-certificate-template.yaml
          
    - name: COPY CONFIGS.
      vars:
        default_path: /etc/kubernetes
        kubeconfig_cert: system:{{ k8s_component }}-kubelet-client
      ansible.builtin.template:
        src: "configs/{{ config.folder | default('') }}/{{ config.name }}"
        dest: "{{ config.path | default(default_path) }}/{{ k8s_component }}/{{ config.name.split('.j2')[0] }}"
        owner: root
        group: root
        mode: '0775'
      loop:
        - name: audit-policy.yaml.j2
          folder: "{{ k8s_component }}"
        - name: egress-selector-configuration.yaml.j2
          folder: "{{ k8s_component }}"
        - name: service-args.j2
          folder: "{{ k8s_component }}"
        - name: config.j2
        - name: kubeconfig.j2
      loop_control:
          loop_var: config
      tags:
        - kube_apiserver_service_update

    - name: ADD NEW SERVICES.
      vars:
        services_list:
          - "{{ k8s_component }}.service"
      import_role:
        name: k8s
        tasks_from: k8s-service-create.yaml
      tags:
        - kube_apiserver_service_update