---
- name: SETUP KUBE-APISERVER.
  vars:
    k8s_component: kube-apiserver
  block:
    - name: DOWNLOAD BASIC BINARY K8S-COMPONENTS.
      get_url:
        url: "{{ k8s_component_bin.url }}"
        dest: "{{ k8s_component_bin.path }}"
        mode: 0775
      loop:
        - url: "{{ kube_apiserver_build.bin.path }}/v{{ kube_apiserver_build.bin.version }}/bin/linux/{{ arch }}/{{ k8s_component }}"
          path: /usr/bin/
      loop_control:
          loop_var: k8s_component_bin
      when: setup_cluster_type == 'service'

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ k8s_component_path }}"
        state: directory
        mode: '0775'
      loop:
        - "{{ default_path }}/{{ k8s_component }}"
        - "{{ pki_path_certs }}/{{ k8s_component }}"
      loop_control:
          loop_var: k8s_component_path
      
    - name: SSL BLOCK.
      block:
        - name: CREATE NEW CA <{{ component_local }}>.
          vars:
            component_local: front-proxy
            ca_new: true
          include_role:
            name: k8s
            tasks_from: k8s-certificates-ca-new.yaml
            apply:
              tags:
                - kube_apiserver_ssl

        - name: CREATE CERT <front-proxy> CLIENT.
          vars:
            csr:
              CN: "system:{{ k8s_component }}-front-proxy-client"
              names:
                - O: "system:masters"
            profile: client
            ca: front-proxy
          include_role:
            name: k8s
            tasks_from: k8s-certificate-template.yaml
            apply:
              tags:
                - kube_apiserver_ssl

        - name: CREATE CERT <sa> SA.
          vars:
            csr:
              CN: "system:{{ k8s_component }}-sa"
              names:
                - O: "system:{{ k8s_component }}"
            profile: sa
            ca: root
          include_role:
            name: k8s
            tasks_from: k8s-certificate-template.yaml
            apply:
              delegate_to: "{{ groups.masters[0] }}"
            apply:
              tags:
                - kube_apiserver_ssl

        - name: DELIVERY CERTS.
          vars:
            patterns: "system:{{ k8s_component }}-sa*"
          include_role:
            name: k8s
            tasks_from: k8s-certificates-ca-delivery.yaml
            apply:
              tags:
                - kube_apiserver_ssl

        - name: CREATE CERT <etcd> CLIENT.
          vars:
            csr:
              CN: "system:{{ k8s_component }}-etcd-client"
              names:
                - O: "system:masters"
            profile: client
            ca: etcd
          include_role:
            name: k8s
            tasks_from: k8s-certificate-template.yaml
            apply:
              tags:
                - kube_apiserver_ssl

        - name: CREATE CERT <{{ k8s_component }}> SERVER.
          vars:
            hosts_list: 
              - "127.0.0.1"
              - "127.0.1.1"
              - "127.0.1.6"
              - "localhost"
              - "kubernetes"
              - "kubernetes.default"
              - "kubernetes.default.svc"
              - "kubernetes.default.svc.cluster"
              - "kubernetes.default.svc.cluster.local"
              - "{{ ansible_default_ipv4.address }}"
              - "{{ cluster_api_ip }}"
              - "{{ external_api_ip }}"
              - "{{ inventory_hostname }}"
            csr:
              CN: "system:{{ k8s_component }}-server"
              names:
                - O: "system:{{ k8s_component }}"
              hosts: "{{ hosts_list }}"
            profile: server
            ca: root
          include_role:
            name: k8s
            tasks_from: k8s-certificate-template.yaml
            apply:
              tags:
                - kube_apiserver_ssl

        - name: CREATE CERT <kubelet> CLIENT.
          vars:
            csr:
              CN: "system:{{ k8s_component }}-kubelet-client"
              names:
                - O: "system:masters"
            profile: client
            ca: root
          include_role:
            name: k8s
            tasks_from: k8s-certificate-template.yaml
            apply:
              tags:
                - kube_apiserver_ssl
      tags:
        - kube_apiserver_ssl

    - name: LIST BASIC CONFIGS
      vars:
        basic_configs:
          - name: audit-policy.yaml.j2
            folder: "{{ k8s_component }}"
          - name: egress-selector-configuration.yaml.j2
            folder: "{{ k8s_component }}"
          - name: kubeconfig.j2
        service_configs:
          - name: service-args-custom.env.j2
            folder: "{{ k8s_component }}"
          - name: service-args-basic.env.j2
      set_fact:
        configs_in_copy: |
          {% if setup_cluster_type == 'service' %}
          {{ basic_configs + service_configs }}
          {% elif setup_cluster_type == 'static-pod' %}
          {{ basic_configs }}
          {% endif %}
      tags:
        - kube_apiserver_configs_update

    - name: COPY CONFIGS.
      vars:
        kubeconfig_cert: system:{{ k8s_component }}-kubelet-client
      include_role:
        name: k8s
        tasks_from: k8s-copy-configs.yaml
        apply:
          tags:
            - kube_apiserver_configs_update
      tags:
        - kube_apiserver_configs_update

    - name: ADD NEW SERVICES.
      vars:
        services_list:
          - "{{ k8s_component }}.service"
      include_role:
        name: k8s
        tasks_from: k8s-service-create.yaml
        apply:
          tags:
            - kube_apiserver_service_update
      tags:
        - kube_apiserver_service_update
      when: setup_cluster_type == 'service'

    - name: COPY MANIFESTS.
      vars:
        default_path: /etc/kubernetes
      ansible.builtin.template:
        src: "configs/{{ config.folder | default('') }}/{{ config.name }}"
        dest: "{{ config.path | default(default_path) }}/manifests/{{ config.name.split('.j2')[0] }}"
        owner: root
        group: root
        mode: '0775'
      loop:
        - name: kube-apiserver.yaml.j2
          folder: "{{ k8s_component }}"
      loop_control:
          loop_var: config
      tags:
        - kube_apiserver_manifest_update
      when: setup_cluster_type == 'static-pod'
